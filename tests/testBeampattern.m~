%test beam steering with superdirective approach
%result should be three beampattern plots, two for ceiling and one for side
%ceiling1 should have a main lobe at 0°
%ceiling2 should have be completely flat (0dB)
%side should have two main lobes at 90° and 270°
clear

%%%%%parameters%%%%%
options.doBeamforming = true;
options.beamforming.doNoProcess = true;
options.beamforming.noProcess.frequNum = 50;
options.beamforming.noProcess.frequMin = 100;
options.beamforming.noProcess.frequMax = 10000;
options.beamforming.doBeampattern = true;
options.beamforming.beampattern.phi = [0:360];
options.beamforming.beampattern.teta = 90;
geometry = [0 0.1];
%%%%%parameters%%%%%

addpath('../');
if(~exist('tmp/'))
	mkdir('tmp/');
end
options.tmpDir = 'tmp/';

options.geometry = [geometry;zeros(2,numel(geometry))];
options.inputSignals = ones(numel(geometry),10);

resultsSide = start(options);%run side

options.beamforming.beampattern.phi = 0;
options.beamforming.beampattern.teta = [-90:90];

resultsCeil1 = start(options);%run ceiling

options.beamforming.beampattern.phi = 90;
options.beamforming.beampattern.teta = [-90:90];

resultsCeil2 = start(options);%run ceiling

frequencies = round(10*resultsSide.frequency)/10;%all freuqencies where pattern
												%and coeffs where calculated
teta = resultsCeil1.beamforming.beampattern.teta;%all teta angles where pattern was
											%calculated
phi = resultsSide.beamforming.beampattern.phi;%all phi angles where pattern was
											%calculated

beampatternSide = resultsSide.beamforming.beampattern.pattern;%resulting
																%beampattern
beampatternCeil1 = resultsCeil1.beamforming.beampattern.pattern;%resulting
																%beampattern
beampatternCeil2 = resultsCeil2.beamforming.beampattern.pattern;%resulting
																%beampattern
%beampattern = 20*log10(beampattern/max(max(max(beampattern))));%to dB
beampatternSide = 20*log10(beampatternSide);%to dB
beampatternSide = round(beampatternSide*100)/100;%round to two digits
beampatternCeil1 = 20*log10(beampatternCeil1);%to dB
beampatternCeil1 = round(beampatternCeil1*100)/100;%round to two digits
beampatternCeil2 = 20*log10(beampatternCeil2);%to dB
beampatternCeil2 = round(beampatternCeil2*100)/100;%round to two digits
dataSide = [phi;squeeze(beampatternSide)];
dataSide = [[numel(phi);frequencies.'],dataSide];
dataCeil1 = [teta;squeeze(beampatternCeil1)];
dataCeil1 = [[numel(teta);frequencies.'],dataCeil1];
dataCeil2 = [teta;squeeze(beampatternCeil2)];
dataCeil2 = [[numel(teta);frequencies.'],dataCeil2];

%write data to csv file
dlmwrite('tmp/testBeampattern_side.csv',dataSide,'precision',2);
dlmwrite('tmp/testBeampattern_ceiling1.csv',dataCeil1,'precision',2);
dlmwrite('tmp/testBeampattern_ceiling2.csv',dataCeil2,'precision',2);

%write gnuplot file
fId = fopen('tmp/testBeampattern.plt','w');
fprintf(fId,'#!/usr/bin/gnuplot\n');
fprintf(fId,'set datafile separator ","\n');
fprintf(fId,'set terminal png\n');
fprintf(fId,'unset key\n');
fprintf(fId,'set pm3d map\n');
fprintf(fId,'set logscale y\n');
fprintf(fId,'set cbrange [-40:0]');
fprintf(fId,'\n');
fprintf(fId,'set output "testBeampattern_side.png"\n');
fprintf(fId,'splot "testBeampattern_side.csv" nonuniform matrix\n');
fprintf(fId,'\n');
fprintf(fId,'set output "testBeampattern_ceiling1.png"\n');
fprintf(fId,'splot "testBeampattern_ceiling1.csv" nonuniform matrix\n');
fprintf(fId,'\n');
fprintf(fId,'set output "testBeampattern_ceiling2.png"\n');
fprintf(fId,'splot "testBeampattern_ceiling2.csv" nonuniform matrix\n');
fclose(fId);

system('cd tmp/;gnuplot testBeampattern.plt');%call gnuplot to generate graphics
